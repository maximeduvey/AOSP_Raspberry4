This project is a litle side project i'm doing on my free-time to better understand AOSP and explore funny features.

If you are reading this, please note that as I'm writting theses lines this is not a "demonstrator" and has no amibition of being a perfect example of what I can do, time is a limited ressources and multiple project already await my work (hello robotic cup).

If you read this it mean I ended putting this repo in public, and if you find this interesting and have some questions, please don't hesitate, I'll be glad to answer and help you.

#  /\___/\
# ( o   o )
# (  =^=  )
# (        )
# (         )
# (          )))))))))))
 

# Kernel
https://github.com/raspberry-vanilla/android_kernel_manifest/tree/android-14.0
How to build:

    Establish Android build environment and install repo.

    Initialize repo:

repo init -u https://android.googlesource.com/kernel/manifest -b common-android14-6.1-lts
curl -o .repo/local_manifests/manifest_brcm_rpi.xml -L https://raw.githubusercontent.com/raspberry-vanilla/android_kernel_manifest/android-14.0/manifest_brcm_rpi.xml --create-dirs

    Sync source code:

repo sync

    Compile:

Raspberry Pi 4:

tools/bazel build --config=fast --config=stamp //common:rpi4

Raspberry Pi 5:

tools/bazel build --config=fast --config=stamp //common:rpi5

Compiled kernel Image, dtbs, and overlays can be found in bazel-bin/common/rpi4/arch/arm64/boot or bazel-bin/common/rpi5/arch/arm64/boot directory.

Replace existing files in device/brcm/rpi4-kernel or device/brcm/rpi5-kernel directory of the Android source tree to include them in Android 14 build. You can also replace existing files in the boot partition of Raspberry Pi 4 or Raspberry Pi 5 Android 14 image.


# android
https://github.com/raspberry-vanilla/android_local_manifest/tree/android-14.0
Device specific configuration to build AOSP Android 14 for Raspberry Pi 4 and Raspberry Pi 5.
How to build (Ubuntu 22.04 LTS):

    Establish Android build environment.

    Install additional packages:

sudo apt-get install bc coreutils dosfstools e2fsprogs fdisk kpartx mtools ninja-build pkg-config python3-pip
sudo pip3 install meson mako jinja2 ply pyyaml dataclasses

    Initialize repo:

repo init -u https://android.googlesource.com/platform/manifest -b android-14.0.0_r67
curl -o .repo/local_manifests/manifest_brcm_rpi.xml -L https://raw.githubusercontent.com/raspberry-vanilla/android_local_manifest/android-14.0/manifest_brcm_rpi.xml --create-dirs

Or optionally, you can reduce download size by creating a shallow clone and removing unneeded projects:

repo init -u https://android.googlesource.com/platform/manifest -b android-14.0.0_r67 --depth=1
curl -o .repo/local_manifests/manifest_brcm_rpi.xml -L https://raw.githubusercontent.com/raspberry-vanilla/android_local_manifest/android-14.0/manifest_brcm_rpi.xml --create-dirs
curl -o .repo/local_manifests/remove_projects.xml -L https://raw.githubusercontent.com/raspberry-vanilla/android_local_manifest/android-14.0/remove_projects.xml

    Sync source code:

repo sync

    Setup Android build environment:

. build/envsetup.sh

    Select the device (rpi4 or rpi5) and build target (tablet UI, tv for Android TV, or car for Android Automotive):

lunch aosp_rpi4-ap2a-userdebug

lunch aosp_rpi4_tv-ap2a-userdebug

lunch aosp_rpi4_car-ap2a-userdebug

lunch aosp_rpi5-ap2a-userdebug

lunch aosp_rpi5_tv-ap2a-userdebug

lunch aosp_rpi5_car-ap2a-userdebug

    Compile:

make bootimage systemimage vendorimage -j$(nproc)

    Make flashable image for the device (rpi4 or rpi5):

./rpi4-mkimg.sh

./rpi5-mkimg.sh


